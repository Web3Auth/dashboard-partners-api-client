import { ecsign, toRpcSig } from "@ethereumjs/util";
import { keccak256 } from "ethereum-cryptography/keccak";
import axios, { AxiosError } from "axios";
import config from "./config";
import {
  Response,
  GetOrganizationsResponse,
  ErrorResponse,
  CreateProjectRequest,
  CreateProjectResponse,
  GetProjectResponse,
  GetProjectsResponse,
  UpdateProjectRequest,
  GetWhitelistsResponse,
  CreateWhitelistRequest,
  DeleteWhitelistRequest,
  GeneralResponse,
  GetChainNamespacesResponse,
  DBChainConfig,
} from "./types";

const dashboardAPIBaseURL = config.dashboardAPIBaseURL;
const publicAddress = config.publicAddress; // TODO: public address, generated by running `npm run keygen`, send this to Web3Auth to be able to use the APIs
const privateKey = config.privateKey; // TODO: private key, generated by running `npm run keygen`
const organizationId = config.organizationId; // TODO: get organization ID by executing getOrganizations(), it's required for creating/updating/deleting projects, adding whitelists...
const projectId = config.projectId; // TODO: get project ID by executing createProject(), it's required for updating/deleting projects, adding whitelist URLs...

const sign = (method: string, url: string, data: string) => {
  const b = Buffer.concat([
    Buffer.from(method, "utf8"),
    Buffer.from(url, "utf8"),
    Buffer.from(data, "utf8"),
  ]);
  const hash = keccak256(b);
  const sig = ecsign(Buffer.from(hash), Buffer.from(privateKey, "hex"));
  return toRpcSig(sig.v, sig.r, sig.s);
};

const client = axios.create({
  baseURL: dashboardAPIBaseURL,
  headers: {
    "X-Auth-Public-Address": publicAddress,
    "Content-Type": "application/json; charset=utf-8",
  },
});

// METHODS
async function getOrganizations() {
  const method = "GET";
  const url = "/partner/organizations";
  const signature = sign(method, url, "");
  try {
    const res: Response<GetOrganizationsResponse> = await client.request({
      method,
      url,
      headers: { "X-Auth-Signature": signature },
    });
    const { data } = res;
    console.log("getOrganizations - response:", data.teams);
  } catch (error) {
    const errorData = (error as AxiosError).response?.data as ErrorResponse;
    console.error("getOrganizations - error:", errorData);
  }
}
async function createProject() {
  const method = "POST";
  const url = "/partner/projects";
  const data: CreateProjectRequest = {
    name: "test-partner-api1",
    network: "testnet",
    // products: ["pnp", "core_kit", "safe_auth", etc],
    platform_types: ["web"],
    chain_namespaces: [
      {
        chain_namespace: "evm",
        wallet_permission: true,
      },
    ],
    team_id: organizationId,
  };
  const signature = sign(method, url, JSON.stringify(data));
  try {
    const res: Response<CreateProjectResponse> = await client.request({
      method,
      url,
      data,
      headers: { "X-Auth-Signature": signature },
    });
    console.log("createProject - response:", res.status, res.data);
  } catch (error) {
    const errorData = (error as AxiosError).response?.data as ErrorResponse;
    console.error("createProject - error:", errorData);
  }
}
async function getProject() {
  const method = "GET";
  const urlPath = `/partner/projects/${projectId}`;
  const signature = sign(method, urlPath, "");
  const url = `${urlPath}?team_id=${organizationId}`;
  try {
    const res: Response<GetProjectResponse> = await client.request({
      method,
      url,
      headers: { "X-Auth-Signature": signature },
    });
    const { data } = res;
    console.log("getProject - response:", data.project);
  } catch (error) {
    const errorData = (error as AxiosError).response?.data as ErrorResponse;
    console.error("getProject - error:", errorData);
  }
}
async function getProjects() {
  const method = "GET";
  const urlPath = "/partner/projects";
  const signature = sign(method, urlPath, "");
  const url = `${urlPath}?team_id=${organizationId}`;
  try {
    const res: Response<GetProjectsResponse> = await client.request({
      method,
      url,
      headers: { "X-Auth-Signature": signature },
    });
    const { data } = res;
    console.log("getProjects - response:", data.projects);
  } catch (error) {
    const errorData = (error as AxiosError).response?.data as ErrorResponse;
    console.error("getProjects - error:", errorData);
  }
}
async function updateProject() {
  const method = "PATCH";
  const url = `/partner/projects/${projectId}`;
  const data: UpdateProjectRequest = {
    name: "test-partner-api9",
    network: "testnet",
    chain_namespaces: [
      // { id: 37, chain_namespace: "evm", wallet_permission: true }, // id is defined: update chain config
      // for DELETE chain namespace you need to pass in id of the chain namespace, chain namespace and is_deleted: true
      // { id: 37, chain_namespace: "evm", is_deleted: true },
      { chain_namespace: "solana", wallet_permission: true }, // id not defined: add new
    ],
    // to update platform types
    // platform_types: ["web"],
    team_id: organizationId,
  };
  const signature = sign(method, url, JSON.stringify(data));
  try {
    const res: Response<GeneralResponse> = await client.request({
      method,
      url,
      data,
      headers: { "X-Auth-Signature": signature },
    });
    console.log("updateProject - response:", res.status, res.data);
  } catch (error) {
    const errorData = (error as AxiosError).response?.data as ErrorResponse;
    console.error("updateProject - error:", errorData);
  }
}
async function deleteProject() {
  const method = "DELETE";
  const urlPath = `/partner/projects/${projectId}`;
  const signature = sign(method, urlPath, "");
  const url = `${urlPath}?team_id=${organizationId}`;
  try {
    const res: Response<GeneralResponse> = await client.request({
      method,
      url,
      headers: { "X-Auth-Signature": signature },
    });
    console.log("deleteProject - response:", res.status, res.data);
  } catch (error) {
    const errorData = (error as AxiosError).response?.data as ErrorResponse;
    console.error("deleteProject - error:", errorData);
  }
}

async function getChainNamespaces() {
  const method = "GET";
  const urlPath = `/partner/projects/${projectId}/chains`;
  const signature = sign(method, urlPath, "");
  const url = `${urlPath}?team_id=${organizationId}`;
  try {
    const res: Response<GetChainNamespacesResponse> = await client.request({
      method,
      url,
      headers: { "X-Auth-Signature": signature },
    });
    console.log(
      "getChainNamespaces - response:",
      res.status,
      res.data.chain_namespaces,
    );
  } catch (error) {
    const errorData = (error as AxiosError).response?.data as ErrorResponse;
    console.error("getChainNamespaces - error:", errorData);
  }
}

async function getWhitelists() {
  const method = "GET";
  const urlPath = `/partner/projects/${projectId}/whitelists`;
  const signature = sign(method, urlPath, "");
  const url = `${urlPath}?team_id=${organizationId}`;
  try {
    const res: Response<GetWhitelistsResponse> = await client.request({
      method,
      url,
      headers: { "X-Auth-Signature": signature },
    });
    console.log("getWhitelists - response:", res.status, res.data);
  } catch (error) {
    const errorData = (error as AxiosError).response?.data as ErrorResponse;
    console.error("getWhitelists - error:", errorData);
  }
}
async function createWhitelist() {
  const method = "POST";
  const url = `/partner/projects/${projectId}/whitelists`;
  const data: CreateWhitelistRequest = {
    url: "http://localhost:8081",
    team_id: organizationId,
  };
  const signature = sign(method, url, JSON.stringify(data));
  try {
    const res: Response<GeneralResponse> = await client.request({
      method,
      url,
      data,
      headers: { "X-Auth-Signature": signature },
    });
    console.log("createWhitelist - response:", res.status, res.data);
  } catch (error) {
    const errorData = (error as AxiosError).response?.data as ErrorResponse;
    console.error("createWhitelist - error:", errorData);
  }
}
async function deleteWhitelist() {
  const method = "DELETE";
  const urlPath = `/partner/projects/${projectId}/whitelists`;
  const signature = sign(method, urlPath, "");
  const url = `${urlPath}?team_id=${organizationId}`;
  try {
    const data: DeleteWhitelistRequest = { url: "http://localhost:8081" };
    const res: Response<GeneralResponse> = await client.request({
      method,
      url,
      params: data,
      headers: { "X-Auth-Signature": signature },
    });
    console.log("deleteWhitelist - response:", res.status, res.data);
  } catch (error) {
    const errorData = (error as AxiosError).response?.data as ErrorResponse;
    console.error("deleteWhitelist - error:", errorData);
  }
}

async function updateChainConfig() {
  const method = "PATCH";
  const url = `/partner/projects/${projectId}/chain-config`;
  const data: { team_id: number; chain_config: DBChainConfig } = {
    team_id: organizationId,
    chain_config: [
      {
        chainId: "0x1",
        rpcTarget: `https://api.web3auth.io/infura-service/v1/0x1/${projectId}`,
        enabled: true,
      },
      {
        chainId: "0x94a9059e",
        rpcTarget: "https://api.shasta.trongrid.io/jsonrpc ", // your custom rpc target url
        enabled: true,
        // wsTarget: "",
        isCustomNetwork: true, // must be true for custom networks
        isTestnet: true,
        chainNamespace: "eip155", // eip155, solana, other
        displayName: "TRON Shasta Testnet",
        blockExplorerUrl: "https://shasta.tronscan.org",
        ticker: "TRX",
        tickerName: "TRON",
        logo: "https://cryptologos.cc/logos/tron-trx-logo.png",
        decimals: 18,
      },
    ],
  };
  const signature = sign(method, url, JSON.stringify(data));
  try {
    const res: Response<GeneralResponse> = await client.request({
      method,
      url,
      data,
      headers: { "X-Auth-Signature": signature },
    });
    console.log("updateChainConfig - response:", res.status, res.data);
  } catch (error) {
    const errorData = (error as AxiosError).response?.data as ErrorResponse;
    console.error("updateChainConfig - error:", errorData);
  }
}

(async function main() {
  await getOrganizations();
  // await getProject();
  // await getProjects();
  // await createProject();
  // await getChainNamespaces();
  // await updateProject();
  // await createWhitelist();
  // await getWhitelists();
  // await deleteWhitelist();
  // await deleteProject();
  // await updateChainConfig();
})();
